// Code generated by mockery v1.0.0. DO NOT EDIT.

package slack

import context "context"
import mock "github.com/stretchr/testify/mock"

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

// GetUserByEmail provides a mock function with given fields: ctx, email
func (_m *MockClient) GetUserByEmail(ctx context.Context, email string) (User, error) {
	ret := _m.Called(ctx, email)

	var r0 User
	if rf, ok := ret.Get(0).(func(context.Context, string) User); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostMessage provides a mock function with given fields: ctx, Message, channel, opts
func (_m *MockClient) PostMessage(ctx context.Context, message string, channel string, opts ...MsgOption) (MessagePosted, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, message, channel)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 MessagePosted
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...MsgOption) MessagePosted); ok {
		r0 = rf(ctx, message, channel, opts...)
	} else {
		r0 = ret.Get(0).(MessagePosted)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...MsgOption) error); ok {
		r1 = rf(ctx, message, channel, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendRequest provides a mock function with given fields: ctx, method, path, data
func (_m *MockClient) SendRequest(ctx context.Context, method string, path string, data []byte) ([]byte, error) {
	ret := _m.Called(ctx, method, path, data)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []byte) []byte); ok {
		r0 = rf(ctx, method, path, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, []byte) error); ok {
		r1 = rf(ctx, method, path, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
